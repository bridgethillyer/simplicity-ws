(ns simplicity-deck.extras
     (:require [hoplon.reveal :refer [chapter slide notes bullet]]
               [simplicity-deck.sample-code :as sample-code]))


(defn slides []
  (chapter :title "Extras"
    (slide :title "Concurrency"
      (ul
        (li "Futures")
        (li "Promises")))
    (slide :title "Program Organization - Leiningen"
      (ul
        (li "Automates Clojure projects. Like Make for Clojure."
        (li "Common commands"
            (ul
              (li "lein new app my-app")
              (li "lein repl")
              (li "lein test")
              (li "lein run")
              (li "lein uberjar"))))))
    (slide :title "Program Organization - Namespaces"
      (ul
        (li (code "ns") " creates namespace and loads, aliases what you need")
        (li "At top of file")
        (li "Refers all of " (code "clojure.core"))
        (li "Imports all of " (code "java.lang")))
      (sample-code/show-namespaces))
    (slide :title "Program Organization - Namespaces"
      (sample-code/show-require))
    (slide :title "Thank you for attending!"
      (p "Clinton Dreisbach @cndreisbach")
      (p "Bridget Hillyer @BridgetHillyer"))
    (slide :title "References"
      (ul
        (li "Rich Hickey - Simple Made Easy: " (a :href "http://www.infoq.com/presentations/Simple-Made-Easy" "http://www.infoq.com/presentations/Simple-Made-Easy"))
        (li "Stuart Halloway - Simplicity Ain't Easy: " (a :href "https://www.youtube.com/watch?v=cidchWg74Y4" "https://www.youtube.com/watch?v=cidchWg74Y4"))
        (li "Alex Miller @puredanger - Thanks for inspiration from CodeMash \"Thinking in Data\" talk" )
        (li "Board game info from: " (a :href "http://boardgamegeek.com/" "http://boardgamegeek.com/"))))))

